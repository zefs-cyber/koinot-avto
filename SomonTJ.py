import pandas as pd
import streamlit as st
from streamlit_dynamic_filters import DynamicFilters
from datetime import datetime, timedelta
from NewFilter import MyFilter




def app(df_today, df_sold):

    def filter_dataframe(df: pd.DataFrame, filters: dict) -> pd.DataFrame:
        """
        This function filters a pandas dataframe based on the provided filters.

        Parameters
        ----------
        df: pd.DataFrame
            The pandas dataframe to be filtered.
        filters: dict
            A dictionary containing the filters to be applied to the dataframe. The keys
            of the dictionary should be the column names, and the values should be a list
            of values to filter by.

        Returns
        -------
        pd.DataFrame
            The filtered pandas dataframe.

        """
        filtered_df = df.copy()  # Create a copy of the original DataFrame to avoid modifying it directly
        # Apply filters to the DataFrame
        for column, values in filters.items():
            if values:  # Check if the list of values for the current column is not empty
                filtered_df = filtered_df[filtered_df[column].isin(values)]
        
        return filtered_df

    new_names_today = ["–ü–æ—Å—Ç", 
                "PostID", 
                "–ò–º—è –∞–≤—Ç–æ—Ä–∞", 
                "AuthorID", 
                "WhatsApp", 
                "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                "Description", 
                "–¶–µ–Ω–∞", 
                "–ì–æ—Ä–æ–¥", 
                "–ö—É–∑–æ–≤", 
                "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", 
                "–¶–≤–µ—Ç",
                "–ü—Ä–∏–≤–æ–¥", 
                "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è", 
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ", 
                "–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞",
                "–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω –≤ –†–¢", 
                "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á",
                "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", 
                "–ú–∞—Ä–∫–∞", 
                "–ú–æ–¥–µ–ª—å",
                "Link"]

    new_names_sold = ["–ü–æ—Å—Ç", 
                "PostID", 
                "–ò–º—è –∞–≤—Ç–æ—Ä–∞", 
                "AuthorID", 
                "WhatsApp", 
                "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                "Description", 
                "–¶–µ–Ω–∞", 
                "–ì–æ—Ä–æ–¥", 
                "–ö—É–∑–æ–≤", 
                "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", 
                "–¶–≤–µ—Ç",
                "–ü—Ä–∏–≤–æ–¥", 
                "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è", 
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ", 
                "–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞",
                "–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω –≤ –†–¢", 
                "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á",
                "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã",
                "sold_date", 
                "–ú–∞—Ä–∫–∞", 
                "–ú–æ–¥–µ–ª—å",
                "selling_time_hours"]

    filters_today =  [
        "–ú–∞—Ä–∫–∞", 
        "–ú–æ–¥–µ–ª—å",
        "–ì–æ—Ä–æ–¥", 
        "–ö—É–∑–æ–≤", 
        "–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞",
        "–ü—Ä–∏–≤–æ–¥", 
        "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á", 
        "–¶–≤–µ—Ç",
        "–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω –≤ –†–¢", 
        "–°–æ—Å—Ç–æ—è–Ω–∏–µ"]

    display_columns = [
                "–ú–∞—Ä–∫–∞", 
                "–ú–æ–¥–µ–ª—å",
                "–¶–µ–Ω–∞", 
                "–ì–æ—Ä–æ–¥", 
                "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
                "–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞", 
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ",
                "Link"]
    
    df_today.columns = new_names_today
    df_sold.columns = new_names_sold

    #Creating Filter
    filters = MyFilter(df_today, filters_name=filters_today)
    st.sidebar.header("–ó–∞–¥–∞–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:")

    # Adding all filters to sidebar
    with st.sidebar:
        price_from = st.sidebar.number_input("–¶–µ–Ω–∞ –æ—Ç", min_value=0, max_value=10000000, value=0, step=5000)
        price_till = st.sidebar.number_input("–¶–µ–Ω–∞ –¥–æ", min_value=price_from, max_value=10000000, value=10000000, step=5000)
        year_range = st.sidebar.slider("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", df_today["–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞"].min(), df_today["–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞"].max(), (df_today["–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞"].min(), df_today["–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞"].max()))
        filters.display_filters()
        
    #Applyting price and year filters to df
    filtered_df = filters.filter()
    filtered_df = filtered_df[
            (filtered_df["–¶–µ–Ω–∞"] >= price_from) & (filtered_df["–¶–µ–Ω–∞"] <= price_till) &
            (filtered_df["–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞"] >= year_range[0]) & (filtered_df["–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞"] <= year_range[1])]

    # Creating metric cards
    col1, col2, col3, col4, col5 = st.columns(5)

    col1.container(border=True).metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω:", len(filtered_df))

    if len(filtered_df["–¶–µ–Ω–∞"]) > 0:
        avg_price =int(filtered_df["–¶–µ–Ω–∞"].mean())
    else:
        avg_price = 0

    col2.container(border=True).metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ TJS:", f"{avg_price}")
    col3.container(border=True).metric("–ú–∞—Ä–∫–∏:", len(filtered_df["–ú–∞—Ä–∫–∞"].unique()))
    col4.container(border=True).metric("–ú–æ–¥–µ–ª–∏:", len(filtered_df["–ú–æ–¥–µ–ª—å"].unique()))

    sold_filtered = filter_dataframe(df_sold, st.session_state["filters"])
    if len(sold_filtered)>0:
        avg_sold_time = round(sold_filtered["selling_time_hours"].mean(),1)
    else:
        avg_sold_time = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    col5.container(border=True).metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏.:", f"{avg_sold_time} –¥")

    main_tab1, main_tab2 = st.tabs(["üìàCharts", "üóÉTable"])
    chart_tabs = main_tab1.tabs(["üèéÔ∏è–ú–æ–¥–µ–ª–∏", "üìã–ë—Ä–µ–Ω–¥—ã", "‚è≤Ô∏è–ü—É–±–ª–∏–∫–∞—Ü–∏–∏", "üë®‚Äçüíº–û–±—â–µ–µ", "üõ¢Ô∏è–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞", "üèôÔ∏è–ì–æ—Ä–æ–¥–∞", "üöô–ö—É–∑–æ–≤", "üìÜ–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", "‚öôÔ∏è–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á", "üåà–¶–≤–µ—Ç", "üõ†Ô∏è–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è"])

    #–ú–æ–¥–µ–ª–∏ graphs
    with chart_tabs[0]:
        modeltypes = filtered_df["–ú–æ–¥–µ–ª—å"].value_counts().sort_values(ascending=False)
        brand_model_views = filtered_df.groupby(["–ú–æ–¥–µ–ª—å"]).agg({"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": "sum"}).reset_index()

        # Sort by views in descending order
        brand_model_views = brand_model_views.sort_values(by="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", ascending=False)

        chart_tabs[0].header("C–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        c1, c2 = chart_tabs[0].columns([3, 1])
        c1.container(border=True).bar_chart(modeltypes.head(30), color="#3c324c")
        c2.dataframe(modeltypes,width=400)
        chart_tabs[0].header("C–∞–º—ã–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏")
        c1, c2 = chart_tabs[0].columns([3, 1])
        c1.container(border=True).bar_chart(brand_model_views.set_index("–ú–æ–¥–µ–ª—å").head(30), color="#3c324c")
        c2.dataframe(brand_model_views, width=400)

    #Brands graphs
    with chart_tabs[1]:
        modeltypes = filtered_df["–ú–∞—Ä–∫–∞"].value_counts().sort_values(ascending=False)
        brand_mark_views = filtered_df.groupby(["–ú–∞—Ä–∫–∞"]).agg({"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": "sum"}).reset_index()
        # Sort by views in descending order
        brand_mark_views = brand_mark_views.sort_values(by="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", ascending=False)
        chart_tabs[1].header("C–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        c1, c2 = chart_tabs[1].columns([3, 1])
        c1.container(border=True).bar_chart(modeltypes.head(30), color="#3c324c")
        c2.dataframe(modeltypes,width=400)
        chart_tabs[1].header("C–∞–º—ã–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏")
        c1, c2 = chart_tabs[1].columns([3, 1])
        c1.container(border=True).bar_chart(brand_mark_views.set_index("–ú–∞—Ä–∫–∞").head(30), color="#3c324c")
        c2.dataframe(brand_mark_views, width=400)

    #Publications graphs
    with chart_tabs[2]:
        filtered_df["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] = pd.to_datetime(filtered_df["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"], dayfirst=True)

        # Extract just the date component
        filtered_df["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] = filtered_df["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"].dt.date
        views_per_day = filtered_df.groupby("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"].sum().sort_values(ascending=False)

        # Group by date and count the number of publications made on each day
        publications_per_day = filtered_df.groupby("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏").size().sort_values(ascending=False)
        chart_tabs[2].header("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
        chart_tabs[2].area_chart(publications_per_day.head(30), color="#3c324c")
        chart_tabs[2].header("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
        chart_tabs[2].area_chart(views_per_day.head(30), color="#3c324c")

    #–û–±—â–µ–µ graphs
    with chart_tabs[3]:
        df_sold_filtered = df_sold.copy()
        for key, values in st.session_state[filters_today].items():
            if values:
                df_sold_filtered = df_sold_filtered[df_sold_filtered[key].isin(values)]

        top_authors = filtered_df["AuthorID"].value_counts().sort_values(ascending=False).head(30)
        top_authors_df = pd.DataFrame({
            "AuthorID": top_authors.index,
            "Name": [filtered_df.loc[filtered_df["AuthorID"] == author_id, "–ò–º—è –∞–≤—Ç–æ—Ä–∞"].iloc[0] for author_id in top_authors.index],
            "Count": top_authors.values
            })
        df_sold["sold_date"] = pd.to_datetime(df_sold["sold_date"])
        most_selling_models = df_sold_filtered.groupby(["–ú–æ–¥–µ–ª—å"]).size().sort_values(ascending=False).head(30)
        # Get value counts based on the date without time, formatting dates as strings
        month_sales = df_sold_filtered["sold_date"].dt.strftime("%Y-%m-%d").value_counts().sort_index(ascending=False)
        # authors = top_authors["AuthorID"]
        chart_tabs[3].header("–¢–æ–ø 30 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")
        c1, c2 = chart_tabs[3].columns([3, 1])
        c1.container(border=True).bar_chart(top_authors, color="#3c324c")
        c2.dataframe(top_authors_df, hide_index=True, width=400)
        chart_tabs[3].header("–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
        chart_tabs[3].container(border=True).area_chart(month_sales, color="#3c324c")
        chart_tabs[3].header("–¢–æ–ø 30 –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π")
        chart_tabs[3].container(border=True).bar_chart(most_selling_models, color="#3c324c")

    #Fueltype graphs
    with chart_tabs[4]:
        g1, g2 = chart_tabs[4].columns([2,1])
        fueltypes = filtered_df["–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞"].value_counts()
        fuel_df = pd.DataFrame(fueltypes)
        fuel_df["Percentage"] = round((fuel_df["count"] / fuel_df["count"].sum()) * 100, 1)
        g1.container(border=True).bar_chart(fueltypes, color="#3c324c")
        g2.dataframe(fuel_df)

    #City graphs
    with chart_tabs[5]:
        citytypes = filtered_df["–ì–æ—Ä–æ–¥"].value_counts()
        chart_tabs[5].container(border=True).bar_chart(citytypes, color="#3c324c")

    #Kuzov graphs
    with chart_tabs[6]:
        g1, g2 = chart_tabs[6].columns(2)
        kuzovtypes = filtered_df["–ö—É–∑–æ–≤"].value_counts()
        kuzov_df = pd.DataFrame(kuzovtypes)
        kuzov_df["Percentage"] = round((kuzov_df["count"] / kuzov_df["count"].sum()) * 100, 1)
        g1.container(border=True).bar_chart(kuzovtypes, color="#3c324c")
        g2.dataframe(kuzov_df)

    #Year graphs
    with chart_tabs[7]:
        yeartypes = filtered_df["–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞"].value_counts()
        average_price_per_year_df = filtered_df.groupby("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞")["–¶–µ–Ω–∞"].mean().reset_index()

        # Convert the "–¶–µ–Ω–∞" column (average price) to integers
        average_price_per_year_df["–¶–µ–Ω–∞"] = average_price_per_year_df["–¶–µ–Ω–∞"].astype(int)
        chart_tabs[7].container(border=True).bar_chart(yeartypes, color="#3c324c")
        chart_tabs[7].dataframe(average_price_per_year_df, width=400)

    #–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á graphs
    with chart_tabs[8]:
        g1, g2 = chart_tabs[8].columns(2)
        korobkatypes = filtered_df["–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á"].value_counts()
        korobka_df = pd.DataFrame(korobkatypes)
        korobka_df["Percentage"] = round((korobka_df["count"] / korobka_df["count"].sum()) * 100, 1)
        g1.container(border=True).bar_chart(korobkatypes, color="#3c324c")
        g2.dataframe(korobka_df)

    #–¶–≤–µ—Ç graphs
    with chart_tabs[9]:
        g1, g2 = chart_tabs[9].columns(2)
        colortypes = filtered_df["–¶–≤–µ—Ç"].value_counts()
        color_df = pd.DataFrame(colortypes)
        color_df["Percentage"] = round((color_df["count"] / color_df["count"].sum()) * 100, 1)
        g1.container(border=True).bar_chart(colortypes, color="#3c324c")
        g2.dataframe(color_df)

    #–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è graphs
    with chart_tabs[10]:
        volumetypes = filtered_df["–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è"].value_counts()
        chart_tabs[10].container(border=True).area_chart(volumetypes, color="#3c324c")

    # Tables
    c1, c2 = main_tab2.columns([2,1])
    c1.dataframe(filtered_df[display_columns])
    grouped_data = filtered_df.groupby(["–ú–æ–¥–µ–ª—å", "–ú–∞—Ä–∫–∞"]).size().reset_index(name="Count")

    # Display as a table
    c2.dataframe(grouped_data, width=400)


