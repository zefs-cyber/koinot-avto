import pandas as pd
import streamlit as st
from NewFilter import MyFilter

def app(df_exracted):
    df_exracted['–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º.'] = pd.to_datetime(df_exracted['–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º.'])


    df_exracted['Month'] = df_exracted['–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º.'].dt.strftime('%Y-%m')
    filters_tamozhnya = [
            'mark',
            '—Å—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è/ —ç–∫—Å–ø–æ—Ä—Ç–∞'
        ]

    dynamic_filters_tamozhnya = MyFilter(df_exracted, filters_name=filters_tamozhnya)
    st.sidebar.header('–ó–∞–¥–∞–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:')

    # Adding all filters to sidebar
    with st.sidebar:
        price_from = st.sidebar.number_input('–¶–µ–Ω–∞ –æ—Ç', min_value=0, max_value=500000, value=0, step=5000)
        price_till = st.sidebar.number_input('–¶–µ–Ω–∞ –¥–æ', min_value=price_from, max_value=500000, value=500000, step=5000)
        year_range = st.sidebar.slider('year', 1950, 2024, (1950,2024))
        dynamic_filters_tamozhnya.display_filters()
        st.sidebar.text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞: ')
        date_start = st.sidebar.date_input('–ù–∞—á–∞–ª–æ', max_value=df_exracted['–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º.'].max(), min_value=df_exracted['–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º.'].min(), value=df_exracted['–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º.'].min())
        date_end = st.sidebar.date_input('–ö–æ–Ω–µ—Ü', min_value=date_start, max_value=df_exracted['–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º.'].max(), value=df_exracted['–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º.'].max())

    date_start, date_end = pd.to_datetime(date_start), pd.to_datetime(date_end)
    #Applyting price and year filters to df
    filtered_df = dynamic_filters_tamozhnya.filter()
    filtered_df = filtered_df[
            (filtered_df['–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è  —Å—Ç–æ–∏–º–æ—Å—Ç—å '] >= price_from) & (filtered_df['–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è  —Å—Ç–æ–∏–º–æ—Å—Ç—å '] <= price_till) &
            (filtered_df['year'] >= year_range[0]) & (filtered_df['year'] <= year_range[1]) &
            (filtered_df['–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º.'] >= date_start) & (filtered_df['–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º.'] <= date_end)]

    # Tamozhnya tab
    col_tamozhnya = st.columns(5)
    car_count = len(filtered_df)
    if car_count > 0:
        mark_count = len(filtered_df['mark'].unique())
        mode_year = int(filtered_df['year'].mode()[0])
        stat_price = int(filtered_df['–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è  —Å—Ç–æ–∏–º–æ—Å—Ç—å '].mean())
        # total_tax = round(filtered_df['total tax'].mean(),1)
        exporters = len(filtered_df['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å/—ç–∫—Å–ø–æ—Ä—Ç–µ—Ä'].unique())
    else:
        mark_count = 0
        mode_year = 0
        stat_price = 0
        total_tax = 0

    # Car Count
    with col_tamozhnya[0]:
        col_tamozhnya[0].container(border=True).metric('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω:', f"{car_count}")

    # Average price
    with col_tamozhnya[1]:
        col_tamozhnya[1].container(border=True).metric('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ USD:', f"{stat_price}")

    # Mark count
    with col_tamozhnya[2]:
        col_tamozhnya[2].container(border=True).metric('–ú–∞—Ä–∫–∏:', f"{mark_count}")

    # Mode year
    with col_tamozhnya[3]:
        col_tamozhnya[3].container(border=True).metric('–ß–∞—Å—Ç—ã–π –≥–æ–¥:', f"{mode_year}")

    # Total tax
    with col_tamozhnya[4]:
        col_tamozhnya[4].container(border=True).metric('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏:', f"{exporters}")

    tabs = st.tabs(['üìã–ë—Ä–µ–Ω–¥—ã', 'üèôÔ∏è–°—Ç—Ä–∞–Ω—ã', 'üìÜ–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞', 'üë®‚Äçüíº–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏', '–ò–º–ø–æ—Ä—Ç –ø–æ –º–µ—Å—è—Ü–∞–º'])

    with tabs[0]:
        marktypes = filtered_df['mark'].value_counts().sort_values(ascending=False)
        total_tax_per_brand = filtered_df.groupby('mark')['total tax'].mean()

        # Round the mean total tax values to one decimal place
        total_tax_per_brand = total_tax_per_brand.round(1)

        # Sort the result by mean total tax in descending order
        total_tax_per_brand = total_tax_per_brand.sort_values(ascending=False)

        tabs[0].header('C–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏')
        c1, c2 = tabs[0].columns([3, 1])
        c1.container(border=True).bar_chart(marktypes.head(30), color='#3c324c')
        c2.dataframe(marktypes,width=400)

        tabs[0].header('–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ª–æ–≥–æ–≤')
        c1, c2 = tabs[0].columns([3, 1])
        c1.container(border=True).bar_chart(total_tax_per_brand.head(30), color='#3c324c')
        c2.dataframe(total_tax_per_brand,width=400)

    with tabs[1]:
        countrytypes = filtered_df['—Å—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è/ —ç–∫—Å–ø–æ—Ä—Ç–∞'].value_counts().sort_values(ascending=False)
        total_tax_per_country = filtered_df.groupby('—Å—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è/ —ç–∫—Å–ø–æ—Ä—Ç–∞')['total tax'].mean()

        # Round the mean total tax values to one decimal place
        total_tax_per_country = total_tax_per_country.round(1)

        # Sort the result by mean total tax in descending order
        total_tax_per_country = total_tax_per_country.sort_values(ascending=False)

        tabs[1].header('–°—Ç—Ä–∞–Ω—ã –∏–º–ø–æ—Ä—Ç–µ—Ä—ã')
        c1, c2 = tabs[1].columns([4, 2])
        c1.container(border=True).bar_chart(countrytypes.head(30), color='#3c324c')
        c2.dataframe(countrytypes,width=400)

        tabs[1].header('–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ª–æ–≥–æ–≤')
        c1, c2 = tabs[1].columns([4, 2])
        c1.container(border=True).bar_chart(total_tax_per_country.head(30), color='#3c324c')
        c2.dataframe(total_tax_per_country,width=400)

    with tabs[2]:
        yeartypes = filtered_df['year'].value_counts().sort_values(ascending=False)
        total_tax_per_year = filtered_df.groupby('year')['total tax'].mean()

        # Round the mean total tax values to one decimal place
        total_tax_per_year = total_tax_per_year.round(1)

        # Sort the result by mean total tax in descending order
        total_tax_per_year = total_tax_per_year.sort_values(ascending=False)


        tabs[2].header('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω –ø—Ä–æ–∏–∑–≤–µ–¥–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ–¥–∞—Ö')
        c1, c2 = tabs[2].columns([2, 1])
        c1.container(border=True).bar_chart(yeartypes.head(30), color='#3c324c')
        c2.dataframe(yeartypes,width=400)

        tabs[2].header('–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ª–æ–≥–æ–≤')
        c1, c2 = tabs[2].columns([2, 1])
        c1.container(border=True).bar_chart(total_tax_per_year.head(30), color='#3c324c')
        c2.dataframe(total_tax_per_year,width=400)
    
    with tabs[3]:
        exporters = filtered_df['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å/—ç–∫—Å–ø–æ—Ä—Ç–µ—Ä'].value_counts().sort_values(ascending=False)

        tabs[3].header('–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä—ã')
        tabs[3].container(border=True).bar_chart(exporters.head(30), color='#3c324c')

        exporters_df = exporters.reset_index()
        exporters_df.columns = ['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å/—ç–∫—Å–ø–æ—Ä—Ç–µ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

        # Display the dataframe in the second column
        tabs[3].dataframe(exporters_df)

    with tabs[4]:
        # Group by month and count occurrences
        months = filtered_df['Month'].value_counts().sort_index()

        tabs[4].header('–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä—ã –ø–æ –º–µ—Å—è—Ü–∞–º')

        # Display the bar chart
        tabs[4].container(border=True).bar_chart(months.head(30), color='#3c324c')

        # Convert the series to DataFrame and reset the index
        exporters_df = months.reset_index()
        exporters_df.columns = ['–ú–µ—Å—è—Ü', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

        # Display the dataframe in the second column
        tabs[4].dataframe(exporters_df, width=400)
